AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS
  
  SAM Template for Nva Person Preferences API

Globals:
  Function:
    Timeout: 20
    Runtime: java17
    MemorySize: 1536
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Location'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CognitoAuthorizationUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/CognitoUri'
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: person-preferences
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  #===========================Tables========================================================

  NvaPersonPreferencesTable2:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub nva-person-preferences2-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: personId
          AttributeType: S
      KeySchema:
        - AttributeName: personId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  #===========================Api========================================================

  PersonPreferencesApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml

  #===========================BasePathMappings========================================================

  PersonPreferencesBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref PersonPreferencesApi
      Stage: !Ref PersonPreferencesApi.Stage

  #============================= Permissions =======================================================

  PreferencesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: invokeFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  DatabaseAccessLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DatabaseAccessLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref PreferencesLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-person-preferences2-${AWS::StackName}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-person-preferences2-${AWS::StackName}/index/*

  #============================= Handlers ==========================================================

  NvaCreatePersonPreferencesHandler:
    Type: AWS::Serverless::Function
    Description: 'Creates preferences for person'
    Properties:
      CodeUri: preferences-rest
      Handler: no.sikt.nva.person.preferences.rest.CreatePersonPreferencesHandler::handleRequest
      Role: !GetAtt PreferencesLambdaRole.Arn
      MemorySize: 1536
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
          TABLE_NAME: !Ref NvaPersonPreferencesTable2
          COGNITO_HOST: !Ref CognitoAuthorizationUri
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref PersonPreferencesApi

  NvaUpdatePreferencesHandler:
    Type: AWS::Serverless::Function
    Description: 'Updates preferences for person'
    Properties:
      CodeUri: preferences-rest
      Handler: no.sikt.nva.person.preferences.rest.UpdatePreferencesHandler::handleRequest
      Role: !GetAtt PreferencesLambdaRole.Arn
      MemorySize: 1536
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
          TABLE_NAME: !Ref NvaPersonPreferencesTable2
          COGNITO_HOST: !Ref CognitoAuthorizationUri
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: put
            RestApiId: !Ref PersonPreferencesApi